"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryStoredFile = void 0;
const class_transformer_1 = require("class-transformer");
const StoredFile_1 = require("./StoredFile");
const concat_stream_1 = __importDefault(require("concat-stream"));
class MemoryStoredFile extends StoredFile_1.StoredFile {
    static create(originalName, encoding, mimetype, stream, config) {
        return new Promise((res, rej) => {
            stream.pipe(concat_stream_1.default({ encoding: 'buffer' }, (buffer) => {
                const file = class_transformer_1.plainToClass(MemoryStoredFile, {
                    originalName,
                    encoding,
                    mimetype,
                    buffer,
                    size: buffer.length,
                });
                res(file);
            }));
        });
    }
    delete() {
        return Promise.resolve(undefined);
    }
}
__decorate([
    class_transformer_1.Transform((params) => (params.value instanceof Buffer) ? params.value : null),
    __metadata("design:type", Buffer)
], MemoryStoredFile.prototype, "buffer", void 0);
exports.MemoryStoredFile = MemoryStoredFile;
//# sourceMappingURL=MemoryStoredFile.js.map